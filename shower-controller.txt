
// This #include statement was automatically added by the Particle IDE.
#include <OneWire.h>

// This #include statement was automatically added by the Particle IDE.
// This is the file edited to allow it to recongnize the OneWire library
#include "spark-dallas-temperature.h"



const String key = "###";//ThingsSpeak write API

//Defining some global variables for the temperatures readings
int led = D0; // This is where your LED is plugged in. The other side goes to a resistor connected to GND.
int boardLed = D7; // This is the LED that is already on your device.
int photoresistor = A0; // This is where your photoresistor is plugged in. The other side goes to the "power" pin (below).
int power = A5; // This is the other end of your photoresistor. The other side is plugged into the "photoresistor" pin (above). 

int beamIntactVal;
bool beamIntactState = TRUE;

int instruction = 0;//intialized at so that shower is off when the loop begins
int statusRead = 0; //mirrors the instruction for now;
//keeping separate from instruction as this is more appropriately considered a reading of system while that is a write to the system   


//----------------
// Servo variables
// ---------------
Servo myservo;  // create servo object to control a servo
int servoPos = 0;//variable to store servo position


// -----------------
// Read temperature
// -----------------

// Setup a oneWire instance to communicate with any OneWire devices (not just Maxim/Dallas temperature ICs)
OneWire oneWire(D2);

// Pass our oneWire reference to Dallas Temperature.
DallasTemperature dallas(&oneWire);

// Create a variable that will store the temperature value
double temperature = 0.0;
double temperatureF = 0.0;


#define TIME_LIMIT_MILLIS (30 * 1000)
unsigned long currTime = millis();
unsigned long reachedReqTempTime = millis();
bool reachedReqTempState = FALSE; 



// A small helper
void error(const char *err) {
  //Serial.println(err);
  while (1);
}







/**************************************************************************/
/*!
    @brief  Sets up the HW an the BLE module (this function is called
            automatically on startup)
*/
/**************************************************************************/
void setup(void)
{
  while (!Serial);  // required for Flora & Micro
  delay(500);

 Particle.function("show", show);  // create a function called "shower" that
                                      // can be called from the cloud
                                      // connect it to the shower function below
 myservo.attach(D1);   // attach the servo on the D0 pin to the servo object
 myservo.write(10);    // test the servo by moving it to 25°


  
    //UW_picked up from the Publish assignment :
  pinMode(led,OUTPUT); // Our LED pin is output (lighting up the LED)
  pinMode(boardLed,OUTPUT); // Our on-board LED is output as well
  pinMode(photoresistor,INPUT);  // Our photoresistor pin is input (reading the photoresistor)
  pinMode(power,OUTPUT); // The pin powering the photoresistor is output (sending out consistent power)
  
  

  //Next, write the power of the photoresistor to be the maximum possible, which is 4095 in analog.
  digitalWrite(power,HIGH);
  //UW_turn on the LED
  digitalWrite(led,HIGH);
  
  delay(5000);// allow serial monitor to connect so that I can actually see the calibration happening
  
  
  // Now we'll take some readings...
  Serial.println("Calibrating beam ... ");
  int on_1 = analogRead(photoresistor); // read photoresistor
  Serial.println(on_1);
  delay(1000); // wait 200 milliseconds
  int on_2 = analogRead(photoresistor); // read photoresistor
  Serial.println(on_2);
  delay(1000); // wait 300 milliseconds
  int on_3 = analogRead(photoresistor); // read photoresistor
  Serial.println(on_3);
  delay(1000); // wait 200 milliseconds
  int on_4 = analogRead(photoresistor); // read photoresistor
  Serial.println(on_4);
  delay(1000); // wait 300 milliseconds
  
  beamIntactVal = (on_1+on_2+on_3+on_4)/4;


  

   // Register a Particle variable here
  Particle.variable("temperature", &temperature, DOUBLE);
  Particle.variable("temperatureF", &temperatureF, DOUBLE);

  // setup the library
  dallas.begin();

  delay(5000);//seems to be some kind of surge or something that really throws the temperature sensor off initially

}


// Cloud functions must return int and take one String
int show(String command)   // when "shower" is called from the cloud, it will
{                          // be accompanied by a string.
    if(command == "now")   // if the string is "now", the shower will turn on and then off; testing purposes
    {                            
        myservo.write(90);       // move servo to 0°
        digitalWrite(D7, HIGH); // flash the LED (as an indicator)
        delay(5000);             // wait 100 ms
        myservo.write(10);      // move servo to 25°
        digitalWrite(D7, LOW);  // turn off LED
        return 1;               // return a status of "1"
    }
    else if(command == "alarm")     // if the string is "alarm",
    {                               
        for (int i = 0; i < 3; i++) // run through the motions  3 times; retaining this from example code for testing purposes
        {
            myservo.write(90);       // moving servo to 0°, as in example code, seems to put some strain on it... using 90 and 10 instead
            digitalWrite(D7, HIGH); // flash the LED
            delay(100);             // wait 100 ms
            myservo.write(10);      // move servo to 10°
            digitalWrite(D7, LOW);  // turn off LED
            delay(1000);            // wait 1 second between actions
        }
        return 2;                   // return a status of "2"
    }
    else if(command == "on_shower")     // turing the shower on,
    {                               
        //visually indicate command received        
        digitalWrite(boardLed,HIGH);
        delay(100);
        digitalWrite(boardLed,LOW);
        delay(100);
        digitalWrite(boardLed,HIGH);
        delay(100);
        digitalWrite(boardLed,LOW);
        delay(100);
        digitalWrite(boardLed,HIGH);
        delay(100);
        digitalWrite(boardLed,LOW);
        delay(100);
        digitalWrite(boardLed,HIGH);
        delay(100);
        digitalWrite(boardLed,LOW);
        delay(100);

        instruction = 1;//allow loop below to start processing
        statusRead = 1;//set status to reflect that the shower is on
        Serial.println("Green lighted");
        // Serial.println(instruction);
        
        myservo.write(90);      // turn shower on
        
    
        reachedReqTempState = FALSE; //flag for whether the appropriate temperature was reached
        return 3;                   // return a status of "3"
    }
    else if(command == "off_shower") 
    {                               
        //visually indicate command received        
        digitalWrite(boardLed,HIGH);
        delay(100);
        digitalWrite(boardLed,LOW);
        delay(100);
        digitalWrite(boardLed,HIGH);
        delay(100);
        digitalWrite(boardLed,LOW);
        delay(100);
        digitalWrite(boardLed,HIGH);
        delay(100);
        digitalWrite(boardLed,LOW);
        delay(100);
        digitalWrite(boardLed,HIGH);
        delay(100);
        digitalWrite(boardLed,LOW);
        delay(100);

        instruction = 0;//pull out of all conditional loops below
        statusRead = 0;//indicate that shower has been shut down
        Serial.println("Shutting down...");
        // Serial.println(instruction);
        
        myservo.write(10);      // turn shower off
        return 4;                // returning an int "4" to meet requirements but under the statusRead schema, this would be a 0
    }
}



/**************************************************************************/
/*!
    @brief  Constantly poll for new command or response data
*/
/**************************************************************************/
void loop(void)
{
    // initialize the temperature variable (set at 0 deg Celsius)
    int temp = 0;
    double resistRead = analogRead(photoresistor);
    String resistOut = "";//***


    dallas.requestTemperatures();
    
    // get the temperature in Celcius
    float tempC = dallas.getTempCByIndex(0);
    
    // convert to Fahrenheit
    float tempF = DallasTemperature::toFahrenheit( tempC );
    // convert to double
    temperatureF = (double)tempF;
      
    Serial.println("Instruction : " + String(instruction));
    Serial.println("Status      : " + String(statusRead));
    Serial.println("Temperature : " + String(temperatureF) + "F");
    Serial.println("Resistance  : " + String(resistRead));    
    Serial.println("Beam intact : " + String(beamIntactState));
    Serial.println("intactVal   : " + String(beamIntactVal));
    Serial.println("");
    
      Particle.publish("shower_ThingsSpeak", "{ \"1\": \"" + String(statusRead) + "\"," +
      "\"2\": \"" + String(resistRead) + "\"," +
      "\"3\": \"" + String(beamIntactState) + "\"," +
      "\"4\": \"" + String(temperatureF) + "\"," +
      "\"k\": \"" + key + "\" }", 60, PRIVATE);


    

    //drop into this loop to start affecting state and behaviour based on monitored variables
    if(instruction == 1){
    
        
        //checking if the flag is currently false so that it is set to true once and the corresponding message is sent only once
        if(reachedReqTempState == FALSE && temperatureF > 100){
            reachedReqTempState = TRUE;
            reachedReqTempTime = millis();
            Particle.publish("shower", String(111), PRIVATE);//cast to string for publishing to Webhook and prompting message from IFTTT
            statusRead = 2;
        }
        
        
        if(beamIntactState == TRUE && resistRead < (beamIntactVal/2)){
            beamIntactState = FALSE;
        }
        
        
        if(reachedReqTempState == TRUE){//once the shower is switched off, control flow will no longer reach this branch so don't need to try to supress messages etc.
            
            Serial.println("Have reached required temperature");
            currTime = millis();
            
            if(beamIntactState == TRUE){
                Serial.println("Beam is still intact");
            
                if(currTime > reachedReqTempTime + (30 * 1000)){
                    Serial.println("Have exceeded time limit!");
                    delay(2000);
                    show("off_shower");
                }
            } else {
                Serial.println("Beam was broken");
                statusRead = 3;//indicating that temperature was reached and the beam was broken
            }
        }        
        
    
    }
    
    delay(15000);//<<<extended delay to 15 seconds

}
